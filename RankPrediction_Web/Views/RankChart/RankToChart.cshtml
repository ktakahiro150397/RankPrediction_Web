@model RankPrediction_Web.Models.ViewModels.Chart.RankToChartViewModel

@{
    ViewData["title"] = "データチャート";
}

@section css{

<style>
    #divChart{
        position:relative;
        width:90%;
        height:calc(75vh - 3rem);
    }
</style>

} 

<section>
    <p>
        ランクごとに、選択したデータの統計を表示します。
    </p>

    <select id="chartDataSelect">
        @foreach (var elem in Model.DisplayChartDataList)
        {
            <option value="@elem.Key">@elem.Value</option>
        }
    </select>

    <hr />

    <div id="divChart">
        <canvas id="chartCanvas"></canvas>
    </div>

</section>


<script>
    //初期チャート表示
    let ctx = document.getElementById("chartCanvas").getContext("2d");
    var chart = new Chart(ctx, { type: 'bar', data: null });

    window.onload = function () {
        //イベント設定
        document.getElementById("chartDataSelect").addEventListener("change", onChartDataSelectChange);

        //初期データ取得
        onChartDataSelectChange();
    }

    //表示データ更新
    function onChartDataSelectChange() {

        //XMLHttpRequestの設定
        let httpRequest = new XMLHttpRequest();

        httpRequest.onreadystatechange = function () {

            if (httpRequest.readyState === XMLHttpRequest.DONE) {
                if (httpRequest.status === 200) {

                    //レスポンスを設定
                    let cfg = JSON.parse(httpRequest.responseText);

                    chart.config._config = cfg;
                    chart.update();

                } else {
                    console.log(`httpRequest.statusが${httpRequest.status}でした。`);
                }
            } else {
                console.log(`readyStateがDONEではなく、${httpRequest.readyState}でした。`);
            }
        }

        //選択値をパラメータに付与してデータ取得
        let select = document.getElementById("chartDataSelect");
        httpRequest.open("GET", `./RetrieveChartData?chartParam=${select.value}`);
        httpRequest.send();

    }

</script>