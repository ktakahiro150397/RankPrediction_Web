@model RankPrediction_Web.Models.ViewModels.Chart.RankToChartViewModel

@{
    ViewData["title"] = "データチャート";
}

@section css{

<style>
    .chart-pos{
        position:relative;
        width:90%;
        height:calc(75vh - 3rem);
    }

    .chart-loading-pos {
        position:relative;
        margin:0;
    }

    #load-icon-div {
        position: absolute;
        top: -1.8rem;
        left: 13rem;
        height: 1.8rem;
        width: 1.8rem;
    }

    #loading-desc{
        position:absolute;
        top:-1.5rem;
        left:11.5rem;

    }
</style>

} 

<section>
    <p>
        ランクごとに、選択したデータの統計を表示します。
    </p>

    <div>

        <select id="chartDataSelect">
            @foreach (var elem in Model.DisplayChartDataList)
            {
                <option value="@elem.Key">@elem.Value</option>
            }
        </select>

        <div id="chart-loading-div" class="chart-loading-pos">
            <span id="chartLoadIcon">
                @await Html.PartialAsync("_LoadingIcon", null)
            </span>
            @*<span id="loading-desc">読み込んでいます…</span>*@
        </div>
        

    </div>

    <hr />

    <div id="divChart" class="chart-pos">
        <canvas id="chartCanvas"></canvas>
    </div>

</section>


<script>

    //初期チャート表示
    let ctx = document.getElementById("chartCanvas").getContext("2d");
    var chart = new Chart(ctx, { type: 'bar', data: null });

    window.onload = function () {

        //イベント設定
        document.getElementById("chartDataSelect").addEventListener("change", onChartDataSelectChange);

        //初期データ取得
        onChartDataSelectChange();

    }

    //表示データ更新
    function onChartDataSelectChange() {

        //ロードアイコンの表示
        let loadDiv = document.getElementById("chart-loading-div");
        loadDiv.style.visibility = "visible";

        //XMLHttpRequestの設定
        let httpRequest = new XMLHttpRequest();

        httpRequest.onreadystatechange = function () {

            if (httpRequest.readyState === XMLHttpRequest.DONE) {
                if (httpRequest.status === 200) {

                    //レスポンスを設定
                    let cfg = JSON.parse(httpRequest.responseText);

                    chart.config._config = cfg;
                    chart.update();

                    //ロードアイコンの非表示
                    loadDiv.style.visibility = "hidden";

                } else {
                    console.log(`httpRequest.statusが${httpRequest.status}でした。`);
                }
            } else {
                console.log(`readyStateがDONEではなく、${httpRequest.readyState}でした。`);
            }
        }

        //選択値をパラメータに付与してデータ取得
        let select = document.getElementById("chartDataSelect");
        httpRequest.open("GET", `./RetrieveChartData?chartParam=${select.value}`);
        httpRequest.send();

    }

</script>